package sm.JAI.iu;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Composite;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RectangularShape;
import java.util.ArrayList;
import java.util.List;


/**
 *
 * @author Javier Aranda
 */
public class Lienzo2D extends javax.swing.JPanel {

    /**
     * Creates new form Lienzo2D
     */
    public Lienzo2D() {
        initComponents();
    }
    
    // Declaracion de variables generales
    private static Color color = Color.BLACK;
    private static Stroke stroke = new BasicStroke((float)1.0);
    private static Composite composicion;
    private static RenderingHints render;
    private final boolean relleno=false;
    private static boolean editar=false;
    private Point p;
    private Shape s;
    static String forma;
    private static Point2D dXY;
    
    Rectangle rectangulo;
    
    
    List<Shape> vShape = new ArrayList();
    
    // Implementacion del metodo paint
    public void paint(Graphics g){
        super.paint(g);
        Graphics2D g2d = (Graphics2D)g;
  
        g2d.setPaint(color); // Damos el color 
        g2d.setStroke(stroke); // Damos el grosor
        g2d.setComposite(composicion); 
        g2d.setRenderingHints(render);
        
        for(Shape s:vShape) {
            if(relleno) g2d.fill(s);
                g2d.draw(s);
            }
    }
    /*
        Metodo que crea el tipo de Shape seleccionado
    */    
    private Shape createShape(Point2D p1, Point2D p2){
        if((p1==null) || (p2==null)) return null;

            switch (forma) {
                case "Punto":
                    return s = new Line2D.Double(p1,p1);

                case "Linea":   
                    return s= new Line2D.Double(p1,p2);

                case "Rectangulo":
                    s = new Rectangle2D.Double();
                    ((RectangularShape)s).setFrameFromDiagonal(p1, p2);
                    return s;

                case "Ovalo":
                    s = new Ellipse2D.Double();
                    ((RectangularShape)s).setFrameFromDiagonal(p1, p2);
                    return s;

                default:
                    return s=null;
            }
    }

    // Metodo para coger la linea mas cercana
    private boolean isNear(Line2D line, Point2D p) {
        if (line.getP1().equals(line.getP2())) {
            return line.getP1().distance(p) <= 3.0;
        } else {
            return line.ptLineDist(p) <= 3.0;
        }
    }

    // Metodo para ver si el click del punto contiene un Shape
    public boolean contains(Shape sh, Point2D p) {
        if (sh instanceof Line2D) {
            return isNear((Line2D) sh, p);
        } else {
            return sh.contains(p);
        }
    }

    // Metodo que devuelve el Shape seleccionado por el punto al hacer click
    private Shape getSelectedShape(Point2D p) {
        // Se recorre el vector devuelve la primera figura que contiene ese punto
        for (Shape s : vShape) {
            if (contains((Shape) s, p)) {
                return s;
            }
        }
        return null;
    }

    public Color getColor() {
        return color;
    }

    public void setColor(Color color) {
        this.color = color;
    }

    public static Stroke getStroke() {
        return stroke;
    }

    public static void setStroke(Stroke stroke) {
        Lienzo2D.stroke = stroke;
    }

    public static boolean isEditar() {
        return editar;
    }

    public static void setEditar(boolean editar) {
        Lienzo2D.editar = editar;
    }

    public Shape getS() {
        return s;
    }

    public void setS(Shape s) {
        this.s = s;
    }

    public static String getForma() {
        return forma;
    }

    public static void setForma(String forma) {
        Lienzo2D.forma = forma;
    }
    
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // Codigo para el MousePressed
        
        p = evt.getPoint(); // Pedimos el punto donde hemos hecho el pressed
        if (editar) {  // Si editar esta activo
            s = getSelectedShape(evt.getPoint()); // Se seleciona el Shape s a mover
            if (s != null) {     //Si s no es null
                double x = (s instanceof Line2D) ? ((Line2D) s).getX1() : s.getBounds2D().getX();
                double y = (s instanceof Line2D) ? ((Line2D) s).getY1() : s.getBounds2D().getY();
                dXY.setLocation(x - p.getX(), y - p.getY());
            }
        }
        else {
            vShape.add(0, createShape(p, p));
        } 
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        // Codigo para el MouseReleased
        formMouseDragged(evt);
    }//GEN-LAST:event_formMouseReleased

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // Codigo para el MouseDragged
        
    }//GEN-LAST:event_formMouseDragged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
